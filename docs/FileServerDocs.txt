Description of classes:


ConnectedClient: This class represents a client that has connected to the server. It is responsible for proxying communications between server and client.

FileClient: This class interacts with a user to download a file from the server and launches "emacs" to either view or edit the file depending on user mode selection. 

FileContents: A "wrapper" class that contains requested file contents, serializable for transmission between client and server. It contains a HashMap of files, representing server-side cache.

FileServer: This is the main implementation of the file server, including the "main()" method used to start the server.

HostedFile: This class is used to coordinte interactions between ConnectedClients and requested files. It also contains references to clients that are currently sharing the file as a HashMap.

ServerFileState: A convenience enumeration to allow for easy state comparisons.

HostedFileTest, ServerImplTest: Classes used for testing and debugging.



-----FileServer-----

FileServer basic description of operation:

At startup (by calling "main", supplying port number as argument), this class is registered with the local RMI registry. The thread then waits for upload or download requests from clients.

When a client attempts to download a file, the server first calls "getFile", which checks the local cache (a HashMap of HostedFile classes, with keys being filenames) to see if the file has already been loaded. If not, the file is read from the filesystem, wrapped in a FileContents class, and a HostedFile class is constructed and placed in the HashMap.

Once the HostedFile is retrieved, the client is registered. If the client download mode is appropriate for the current file state the FileContents object is returned to the client. If the download request is for write, and the client is not the current owner, HostedFile iterates through all ConnectedClients and calls "writeback" for each.

When a client attempts to upload new file contents, the matching HostedFile is obtained from the HashMap, file state is checked to see if client upload is permissible. If permitted, FileContents are set, and the HostedFile calls each ConnectedClient to invalidate their locally-cached copies.

On upload, once all clients have either been requested to writeback or invalidate, and the new owner registered (for ownership change only), new file contents are written back to the filesystem and file state reset to "not shared". By virtue of the mechanism for changing ownership, only two clients can be in the write state (one waiting for emacs to finish editing, the other waiting on a blocking "registerOwner" call). Other clients may still download the file for reading; those clients will receive an "invalidate" call once the first client completes the writeback, though.



Funtional improvements for FileServer:

1) Command-line parameter to enable/disable debugging messages
2) Console commands for viewing server status, managing clients or cache entries



Performance improvements for FileServer:

1) Asynchronous callbacks to ConnectedClients, rather than sequential iteration
2) Automatic expiration/eviction of files (HostedFile) from cache (the HashMap)
3) Sending/receiving files using stream rather than serialized wrapper class
4) Using "reactor" or "proactor" patterns (among others) for accepting and dispatching requests



Deviations from specification, FileServer:

The only (intentional) deviation was to use HashMaps rather than Vectors. A HashMap provides quicker access than iterating through a Vector or implementing a Comparator for HostedFiles. In this implementation, a HashMap won't provide any real performance improvement or provide protection against concurrent access (Iterators), but it was an interesting exercise to try.



-----FileClient-----

Structure:

The File Client only uses one class (FileClient) which handles both the connection with the server and the caching of the temporary file. The FileClient also implements the ClientInterface methods (invalidate() and writeback()).



Main flow:

The main flow of the program is in the startClient() method, where a while loop keeps asking the user which file he wants to read/write, and further operations (like download or upload) are performed.

In the loop, after the user picked a file, a check is going to be performed to see if the file has to be downloaded through the chekIfExists() method. Depending on the permissions the user wants and the ones that are currently in place, the method will return either true or false.

When the file is in the tmp, then emacs is opened at the end of the loop. The loop doesn’t restart until emacs is closed.



File state:

The current state of the cache file is managed by an enumeration called FileState. The elements are named using the same convention as in the assignment description:
Invalid: cache not valid for use
ReadShared: client has read only permissions
WriteOwned: client has write permissions as well
ReleaseOwnership: client will lose the write permissions soon since another client wants the file



Emacs/Permissions flow:

When a file needs to be shown in emacs, the tmp cache file’s permission is changed into read/write to make sure that the content that has been downloaded is copied into the cache. Then, the permissions are set back to the ones the user picked (either read only or read/write). After the permissions have been set, the file is loaded into emacs.

Since emacs is a command that requires tty, it uses a special ProcessBuilder to make sure that the current shell window is used as the basis for displaying the emacs interface. I/O is also inherited because typing is going to be involved. 



Writeback check:

When the server warns a client that it needs to write its data back to the server (switch to ReleaseOwnership state), the client uploads the file as soon as the emacs process ends. Initially, a thread that would constantly check the state of the file was considered, but it was a bit “overkill” and it created some performance issues.
